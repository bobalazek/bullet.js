///// Collision Dispatch /////

// http://bulletphysics.org/Bullet/BulletFull/classbtDispatcher.html
interface btDispatcher {
    long getNumManifolds();

    [Const] btPoolAllocator getInternalManifoldPool();

    any allocateCollisionAlgorithm(long size);
    void freeCollisionAlgorithm(any ptr);
};

// http://bulletphysics.org/Bullet/BulletFull/classbtBroadphaseInterface.html
interface btBroadphaseInterface {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionConfiguration.html
interface btCollisionConfiguration {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/structbtDispatcherInfo.html
interface btDispatcherInfo {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/btCollisionObject_8h.html#a6e21ccefdea3a53d5ec8f6aa2849bf8b
interface btCollisionObjectArray {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1RayResultCallback.html
[Prefix="btCollisionWorld::"]
interface RayResultCallback {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1ConvexResultCallback.html
[Prefix="btCollisionWorld::"]
interface ConvexResultCallback {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1ContactResultCallback.html
[Prefix="btCollisionWorld::"]
interface ContactResultCallback {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/structbtDefaultCollisionConstructionInfo.html
interface btDefaultCollisionConstructionInfo {
    void btDefaultCollisionConstructionInfo();

    attribute btPoolAllocator m_persistentManifoldPool;
    attribute btPoolAllocator m_collisionAlgorithmPool;
    attribute long 	m_defaultMaxPersistentManifoldPoolSize;
    attribute long 	m_defaultMaxCollisionAlgorithmPoolSize;
    attribute long 	m_customCollisionAlgorithmMaxElementSize;
    attribute long 	m_useEpaPenetrationAlgorithm;
};

// http://bulletphysics.org/Bullet/BulletFull/classbtDefaultCollisionConfiguration.html
interface btDefaultCollisionConfiguration  {
    void btDefaultCollisionConfiguration([Ref, Const] btDefaultCollisionConstructionInfo constructionInfo);
};

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionObject.html
interface btCollisionObject {
    boolean mergesSimulationIslands();

    [Ref, Const] btVector3 getAnisotropicFriction();
    void setAnisotropicFriction([Ref, Const] btVector3 anisotropicFriction, long frictionMode);
    boolean hasAnisotropicFriction(long frictionMode);

    void setContactProcessingThreshold(float contactProcessingThreshold);
    float getContactProcessingThreshold();

    boolean isStaticObject();
    boolean isKinematicObject();
    boolean isStaticOrKinematicObject();
    boolean hasContactResponse();

    void btCollisionObject();

    void setCollisionShape(btCollisionShape collisionShape);
    [Const] btCollisionShape getCollisionShape();

    void setIgnoreCollisionCheck ([Const] btCollisionObject co, boolean ignoreCollisionCheck);
    boolean checkCollideWithOverride([Const] btCollisionObject co);

    any internalGetExtensionPointer();
    void internalSetExtensionPointer(any pointer);

    long getActivationState();
    void setActivationState(long newState);
    void setDeactivationTime(float time);
    float getDeactivationTime();

    void forceActivationState(long newState);
    void activate(boolean forceActivation);
    boolean isActive();

    void setRestitution(float rest);
    float getRestitution();

    void setFriction(float frict);
    float getFriction();

    void setRollingFriction(float frict);
    float getRollingFriction();

    long getInternalType();

    [Ref, Const] btTransform getWorldTransform();
    void setWorldTransform([Ref, Const] btTransform worldTrans);

    [Const] btBroadphaseProxy getBroadphaseHandle();
    void setBroadphaseHandle([Const] btBroadphaseProxy handle);

    [Ref, Const] btTransform getInterpolationWorldTransform();
    void setInterpolationWorldTransform([Ref, Const] btTransform trans);

    void setInterpolationLinearVelocity([Ref, Const] btVector3 linvel);
    void setInterpolationAngularVelocity([Ref, Const] btVector3 angvel);
    [Ref, Const] btVector3 getInterpolationLinearVelocity();
    [Ref, Const] btVector3 getInterpolationAngularVelocity();

    long getIslandTag();
    void setIslandTag(long tag);

    long getCompanionId();
    void setCompanionId(long id);

    float getHitFraction();
    void setHitFraction(float hitFraction);

    long getCollisionFlags();
    void setCollisionFlags(long flags);

    float getCcdSweptSphereRadius();
    void setCcdSweptSphereRadius(float radius);

    float getCcdMotionThreshold();
    float getCcdSquareMotionThreshold();
    void setCcdMotionThreshold(float ccdMotionThreshold);

    long getUpdateRevisionInternal();

    boolean checkCollideWith([Const] btCollisionObject co);
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionObjectWrapper.html
// TODO: the "BT_DECLARE_STACK_ONLY_OBJECT" macro making issues
// interface btCollisionObjectWrapper {
    // void btCollisionObjectWrapper(
    //     [Const] btCollisionObjectWrapper  parent,
    //     [Const] btCollisionShape shape,
    //     [Const] btCollisionObject collisionObject,
    //     [Ref, Const] btTransform worldTransform,
    //     long partId,
    //     long index
    // );

    // [Ref, Const] btTransform getWorldTransform();
    // [Const] btCollisionObject getCollisionObject();
    // [Const] btCollisionShape getCollisionShape();

    // [Const] attribute btCollisionObjectWrapper m_parent;
    // [Const] attribute btCollisionShape m_shape;
    // [Const] attribute btCollisionObject m_collisionObject;
    // [Value] attribute btTransform m_worldTransform;
    // attribute long m_partId;
    // attribute long m_index;
//};

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionWorld.html
interface btCollisionWorld {
    void btCollisionWorld(
        btDispatcher dispatcher,
        btBroadphaseInterface broadphasePairCache,
        btCollisionConfiguration collisionConfiguration
    );

    void setBroadphase(btBroadphaseInterface pairCache);
    [Const] btBroadphaseInterface getBroadphase();
    // [Const] btOverlappingPairCache getPairCache();
    [Const] btDispatcher getDispatcher();

    void updateSingleAabb(btCollisionObject colObj);
    void updateAabbs();
    void computeOverlappingPairs();

    // void setDebugDrawer(btIDebugDraw debugDrawer);
    // btIDebugDraw getDebugDrawer();

    void debugDrawWorld();
    void debugDrawObject(
        [Ref, Const] btTransform worldTransform,
        [Const] btCollisionShape shape,
        [Ref, Const] btVector3 color
    );

    long getNumCollisionObjects();
    void rayTest (
        [Ref, Const] btVector3 rayFromWorld,
        [Ref, Const] btVector3 rayToWorld,
        [Ref] RayResultCallback resultCallback
    );
    void convexSweepTest(
        [Const] btConvexShape castShape,
        [Ref, Const] btTransform from,
        [Ref, Const] btTransform to,
        [Ref] ConvexResultCallback resultCallback,
        float allowedCcdPenetration
    );

    void contactTest(
        btCollisionObject colObj,
        [Ref] ContactResultCallback resultCallback
    );
    void contactPairTest(
        btCollisionObject colObjA,
        btCollisionObject colObjB,
        [Ref] ContactResultCallback resultCallback
    );
    void addCollisionObject(
        btCollisionObject collisionObject,
        long collisionFilterGroup,
        long collisionFilterMask
    );

    [Ref, Const] btCollisionObjectArray getCollisionObjectArray();
    void removeCollisionObject(btCollisionObject collisionObject);
    void performDiscreteCollisionDetection();

    [Ref, Const] btDispatcherInfo getDispatchInfo();
    boolean getForceUpdateAllAabbs();
    void setForceUpdateAllAabbs(boolean forceUpdateAllAabbs);
};

///// Narrow Phase Collision /////

// http://bulletphysics.org/Bullet/BulletFull/classbtManifoldPoint.html
interface btManifoldPoint {
    void btManifoldPoint();
    void btManifoldPoint(
        [Ref, Const] btVector3 pointA,
        [Ref, Const] btVector3 pointB,
        [Ref, Const] btVector3 normal,
        float distance
    );

    float getDistance();
    long getLifeTime();
    [Ref, Const] btVector3 getPositionWorldOnA();
    [Ref, Const] btVector3 getPositionWorldOnB();
    void setDistance(float dist);
    float getAppliedImpulse();

    [Value] attribute btVector3 m_localPointA;
    [Value] attribute btVector3 m_localPointB;
    [Value] attribute btVector3 m_positionWorldOnB;
    [Value] attribute btVector3 m_positionWorldOnA;
    [Value] attribute btVector3 m_normalWorldOnB;
    attribute float m_distance1;
    attribute float m_combinedFriction;
    attribute float m_combinedRollingFriction;
    attribute float m_combinedRestitution;
    attribute float m_partId0;
    attribute float m_partId1;
    attribute float m_index0;
    attribute float m_index1;
    attribute any m_userPersistentData;
    attribute float m_appliedImpulse;
    attribute float m_appliedImpulseLateral1;
    attribute float m_appliedImpulseLateral2;
    attribute float m_contactMotion1;
    attribute float m_contactMotion2;
    attribute float m_contactCFM;
    attribute long m_lifeTime;
    [Value] attribute btVector3 m_lateralFrictionDir1;
    [Value] attribute btVector3 m_lateralFrictionDir2;
};

// http://bulletphysics.org/Bullet/BulletFull/classbtPersistentManifold.html
interface btPersistentManifold {
    void btPersistentManifold();
    void btPersistentManifold(
        [Const] btCollisionObject body0,
        [Const] btCollisionObject body1,
        long someStrangeInt, // TODO: what is this? http://bulletphysics.org/Bullet/BulletFull/classbtPersistentManifold.html#adee3b3c0e4c92f7e406fdc1fcbdecb6a
        float contactBreakingThreshold,
        float contactProcessingThreshold
    );

    [Const] btCollisionObject getBody0();
    [Const] btCollisionObject getBody1();

    void setBodies(
        [Const] btCollisionObject body0,
        [Const] btCollisionObject body1
    );

    void clearUserCache([Ref] btManifoldPoint pt);

    long getNumContacts();
    void setNumContacts(long cachedPoints);
};

///// Broadphase Collision /////

// http://bulletphysics.org/Bullet/BulletFull/structbtDbvt.html
interface btDbvtVolume {
    // TODO
};

// http://bulletphysics.org/Bullet/BulletFull/structbtBroadphaseProxy.html
interface btBroadphaseProxy {
    void btBroadphaseProxy();

    long getUid();

    boolean isPolyhedral(long proxyType);
    boolean isConvex(long proxyType);
    boolean isNonMoving(long proxyType);
    boolean isConcave(long proxyType);
    boolean isCompound(long proxyType);
    boolean isSoftBody(long proxyType);
    boolean isInfinite(long proxyType);
    boolean isConvex2d(long proxyType);
};

// http://bulletphysics.org/Bullet/BulletFull/structbtDbvtNode.html
interface btDbvtNode {
    boolean isleaf();
    boolean isinternal();
    [Value] attribute btDbvtVolume volume;
    // [Value] attribute btDbvtNode parent;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtDbvt.html
interface btDbvt {
    void clear();
    boolean empty();
    void optimizeBottomUp();
    void optimizeTopDown(long bu_treshold);
    void optimizeIncremental(long passes);

    btDbvtNode insert([Ref, Const] btDbvtVolume box, any data);
    // void update(btDbvtNode leaf, long lookahead);
    void update(btDbvtNode leaf, [Ref] btDbvtVolume volume);
    void update(btDbvtNode leaf, [Ref] btDbvtVolume volume, [Ref, Const] btVector3 velocity, float margin);
    void update(btDbvtNode leaf, [Ref] btDbvtVolume volume, [Ref, Const] btVector3 velocity);
    // void update(btDbvtNode leaf, [Ref] btDbvtVolume volume, float margin);
    void remove(btDbvtNode leaf);
};

///// Shapes /////

// http://bulletphysics.org/Bullet/BulletFull/classbtTriangleCallback.html
interface btTriangleCallback {
    void processTriangle(btVector3 triangle, long partId, long trinagleIndex);
};

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionShape.html
interface btCollisionShape {
    void getAabb([Ref, Const] btTransform t, [Ref] btVector3 aabbMin, [Ref] btVector3 aabbMax);
    void getBoundingSphere([Ref] btVector3 center, float radius);
    float getAngularMotionDisc();
    float getContactBreakingThreshold(float defaultContactThresholdFactor);

    void calculateTemporalAabb(
        [Ref, Const] btTransform curTrans,
        [Ref, Const] btVector3 linvel,
        [Ref, Const] btVector3 angvel,
        float timeStep,
        [Ref] btVector3 temporalAabbMin,
        [Ref] btVector3 temporalAabbMax
    );

    boolean isPolyhedral();
    boolean isConvex2d();
    boolean isConvex();
    boolean isNonMoving();
    boolean isConcave();
    boolean isCompound();
    boolean isSoftBody();
    boolean isInfinite();

    void setLocalScaling([Ref] btVector3 scaling);
    [Const, Ref] btVector3 getLocalScaling();

    void calculateLocalInertia(float mass, [Ref] btVector3 inertia);

    [Const] DOMString getName();
    long getShapeType();

    [Value] btVector3 getAnisotropicRollingFrictionDirection();

    void setMargin(float margin);
    float getMargin();
};

// http://bulletphysics.org/Bullet/BulletFull/classbtCompoundShape.html
interface btCompoundShape {
    void btCompoundShape(boolean enableDynamicAabbTree, long initialChildCapacity);

    void addChildShape([Ref, Const] btTransform localTransform, btCollisionShape shape);
    void removeChildShape(btCollisionShape shape);
    void removeChildShapeByIndex(long childShapeIndex);

    [Const] btCollisionShape getChildShape(long index);
    [Const, Ref] btTransform getChildTransform(long index);
    void updateChildTransform(long childIndex, [Ref, Const] btTransform newChildTransform, boolean shouldRecalculateLocalAabb);

    // btCompoundShapeChild getChildList();

    void getAabb([Ref, Const] btTransform t, [Ref] btVector3 aabbMin, [Ref] btVector3 aabbMax);
    void recalculateLocalAabb();

    void setLocalScaling([Ref, Const] btVector3 scaling);
    [Ref, Const] btVector3 getLocalScaling();

    void calculateLocalInertia(float mass, [Ref] btVector3 inertia);

    void setMargin(float margin);
    float getMargin();

    [Const] DOMString getName();

    [Const] btDbvt getDynamicAabbTree();

    void createAabbTreeFromChildren();
    // void calculatePrincipalAxisTransform(float masses, [Ref] btTransform principal, [Ref] btVector3 inertia);

    long getUpdateRevision();
};
btCompoundShape implements btCollisionShape;

// http://bulletphysics.org/Bullet/BulletFull/classbtConcaveShape.html
interface btConcaveShape {
    void processAllTriangles(btTriangleCallback callback, [Ref, Const] btVector3 aabbMin, [Ref, Const] btVector3 aabbMax);
    float getMargin();
    void setMargin(float margin);
};
btConcaveShape implements btCollisionShape;

// http://bulletphysics.org/Bullet/BulletFull/classbtConvexShape.html
interface btConvexShape {
    [Value] btVector3 localGetSupportingVertex([Ref, Const] btVector3 vec);
    [Value] btVector3 localGetSupportingVertexWithoutMargin([Ref, Const] btVector3 vec);
    [Value] btVector3 localGetSupportVertexWithoutMarginNonVirtual([Ref, Const] btVector3 vec);
    [Value] btVector3 localGetSupportVertexNonVirtual([Ref, Const] btVector3 vec);

    float getMarginNonVirtual();

    void getAabbNonVirtual([Ref, Const] btTransform t, [Ref] btVector3 aabbMin, [Ref] btVector3 aabbMax);
    void project(
        [Ref, Const] btTransform trans,
        [Ref, Const] btVector3 dir,
        float minProj, float maxProj,
        [Ref] btVector3 witnesPtMin,
        [Ref] btVector3 witnesPtMax
    );
    void batchedUnitVectorGetSupportingVertexWithoutMargin(
        [Const] btVector3 vectors,
        btVector3 supportVerticesOut,
        long numVectors
    );
    void getAabb([Ref, Const] btTransform t, [Ref] btVector3 aabbMin, [Ref] btVector3 aabbMax);
    void getAabbSlow([Ref, Const] btTransform t, [Ref] btVector3 aabbMin, [Ref] btVector3 aabbMax);
    void setLocalScaling([Ref, Const] btVector3 scaling);
    [Ref, Const] btVector3 getLocalScaling();

    float getMargin();
    void setMargin(float margin);

    long getNumPreferredPenetrationDirections();
    void getPreferredPenetrationDirection(long index, [Ref] btVector3 penetrationVector);
};
btConvexShape implements btCollisionShape;