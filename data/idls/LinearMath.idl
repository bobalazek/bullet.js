///// Vectors /////

// http://bulletphysics.org/Bullet/BulletFull/classbtVector3.html
interface btVector3 {
    void btVector3();
    void btVector3(float _x, float _y, float _z);

    // [Operator="+=", Ref] btVector3 op_add([Ref] btVector3 v);
    // [Operator="-=", Ref] btVector3 op_sub([Ref] btVector3 v);
    // [Operator="*=", Ref] btVector3 op_mul(float s);
    // [Operator="/=", Ref] btVector3 op_div(float s);

    float dot([Ref, Const] btVector3 v);
    float length2();
    float length();
    float norm();
    float distance2([Ref, Const] btVector3 v);
    float distance([Ref, Const] btVector3 v);

    [Ref] btVector3 safeNormalize();
    [Ref] btVector3 normalize();
    void normalized();

    [Value] btVector3 rotate([Ref, Const] btVector3 wAxis, float angle);
    float angle([Ref, Const] btVector3 v);
    [Value] btVector3 absolute();
    [Value] btVector3 cross([Ref, Const] btVector3 v);
    float triple([Ref, Const] btVector3 v1, [Ref, Const] btVector3 v2);

    long minAxis();
    long maxAxis();
    long furthestAxis();
    long closestAxis();

    void setInterpolate3([Ref, Const] btVector3 v0, [Ref, Const] btVector3 v1, float rt);
    [Value] btVector3 lerp([Ref, Const] btVector3 v, float t);

    [Operator="*=", Ref] btVector3 op_mul_v([Ref] btVector3 v);

    float getX();
    float getY();
    float getZ();
    void setX(float _x);
    void setY(float _y);
    void setZ(float _z);
    void setW(float _w);
    float x();
    float y();
    float z();
    float w();

    // [Operator="=="] boolean op_eq([Ref, Const] btVector3 other);

    void setMax([Ref, Const] btVector3 other);
    void setMin([Ref, Const] btVector3 other);
    void setValue(float _x, float _y, float _z);
    void getSkewSymmetricMatrix(btVector3 v0, btVector3 v1, btVector3 v2);

    void setZero();
    boolean isZero();
    boolean fuzzyZero();

    [Value] btVector3 dot3([Ref, Const] btVector3 v0, [Ref, Const] btVector3 v1, [Ref, Const] btVector3 v2);
};

// http://bulletphysics.org/Bullet/BulletFull/classbtVector4.html
interface btVector4 {
    void btVector4();
    void btVector4(float _x, float _y, float _z, float _w);

    [Value] btVector4 absolute4();
    float getW();
    long maxAxis4();
    long minAxis4();
    float closestAxis4();
    void setValue(float _x, float _y, float _z, float _w);
};
btVector4 implements btVector3;

///// Quaternions /////

interface btQuadWord {
    float getX();
    float getY();
    float getZ();
    void setX(float _x);
    void setY(float _y);
    void setZ(float _z);
    void setW(float _w);
    float x();
    float y();
    float z();
    float w();
};

// http://bulletphysics.org/Bullet/BulletFull/classbtQuaternion.html
interface btQuaternion {
    void btQuaternion();
    void btQuaternion(float _x, float _y, float _z, float _w);
    void btQuaternion([Ref, Const] btVector3 _axis, float _angle);
    void btQuaternion(float yaw, float pitch, float roll);

    void setRotation([Ref, Const] btVector3 axis, float _angle);
    void setEuler(float yaw, float pitch, float roll);
    void setEulerZYX(float yaw, float pitch, float roll);

    // [Operator="+=", Ref] btQuaternion op_add([Ref, Const] btQuaternion q);
    // [Operator="-=", Ref] btQuaternion op_sub([Ref, Const] btQuaternion q);
    // [Operator="*=", Ref] btQuaternion op_mul(float s);
    // [Operator="*=", Ref] btQuaternion op_mul_q([Ref, Const] btQuaternion q);

    float dot([Ref, Const] btQuaternion q);
    float length2();
    float length();
    [Ref] btQuaternion normalize();

    // [Operator="/=", Ref] btQuaternion op_div(float s);

    void normalized();

    float angle([Ref, Const] btQuaternion q);
    float angleShortestPath([Ref, Const] btQuaternion q);
    float getAngle();
    float getAngleShortestPath();

    [Value] btVector3 getAxis();

    [Value] btQuaternion inverse();

    [Value] btQuaternion farthest([Ref, Const] btQuaternion qd);
    [Value] btQuaternion nearest([Ref, Const] btQuaternion qd);
    [Value] btQuaternion slerp([Ref, Const] btQuaternion q, float t);

    float getW();

    [Ref, Const] btQuaternion getIdentity();
};

// http://bulletphysics.org/Bullet/BulletFull/classbtMatrix3x3.html
interface btMatrix3x3 {
    void btMatrix3x3();
    // void btMatrix3x3([Ref, Const] btQuaternion q);
    void btMatrix3x3(float xx, float xy, float xz, float yx, float yy, float yz, float zx, float zy, float zz);
    void btMatrix3x3([Ref, Const] btMatrix3x3 other);

    [Value] btVector3 getColumn(long i);
    [Value] btVector3 getRow(long i);

    // [Operator="*=", Ref] btMatrix3x3 op_mul([Ref, Const] btMatrix3x3 m);
    // [Operator="+=", Ref] btMatrix3x3 op_add([Ref, Const] btMatrix3x3 m);
    // [Operator="-=", Ref] btMatrix3x3 op_sub([Ref, Const] btMatrix3x3 m);

    // void setFromOpenGLSubMatrix(float m);
    void setValue(float xx, float xy, float xz, float yx, float yy, float yz, float zx, float zy, float zz);
    void setRotation([Ref, Const] btQuaternion q);
    void setEulerYPR(float yaw, float pitch, float roll);
    void setEulerZYX(float eulerX, float eulerY, float eulerZ);
    void setIdentity();

    // void getOpenGLSubMatrix(float m);
    void getRotation([Ref] btQuaternion q);
    void getEulerYPR(float yaw, float pitch, float roll);
    void getEulerZYX(float eulerX, float eulerY, float eulerZ);

    [Value] btMatrix3x3 scaled([Ref, Const] btVector3 s);
    float determinant();
    [Value] btMatrix3x3 adjoint();
    [Value] btMatrix3x3 absolute();
    [Value] btMatrix3x3 transpose();
    [Value] btMatrix3x3 inverse();
    [Value] btVector3 solve33([Ref, Const] btVector3 b);
    [Value] btMatrix3x3 transposeTimes([Ref, Const] btMatrix3x3 m);
    [Value] btMatrix3x3 timesTranspose([Ref, Const] btMatrix3x3 m);
    float tdotx([Ref, Const] btVector3 v);
    float tdoty([Ref, Const] btVector3 v);
    float tdotz([Ref, Const] btVector3 v);

    void diagonalize([Ref] btMatrix3x3 rot, float threshold, long maxSteps);
    float cofac(long r1, long c1, long r2, long c2);

    [Ref, Const] btMatrix3x3 getIdentity();
};

// http://bulletphysics.org/Bullet/BulletFull/classbtTransform.html
interface btTransform {
    void btTransform();
    void btTransform([Ref, Const] btQuaternion q, [Ref, Const] btVector3 c);
    // void btTransform([Ref, Const] btMatrix3x3 b, [Ref, Const] btVector3 c);
    void btTransform([Ref, Const] btTransform other);

    void mult([Ref, Const] btTransform t1, [Ref, Const] btTransform t2);

    [Ref, Const] btMatrix3x3 getBasis();
    [Ref, Const] btVector3 getOrigin();
    [Value] btQuaternion getRotation();

    // void setFromOpenGLSubMatrix(float m);
    // void getOpenGLSubMatrix(float m);

    void setOrigin([Ref, Const] btVector3 origin);
    [Value] btVector3 invXform([Ref, Const] btVector3 inVec);

    void setBasis([Ref, Const] btMatrix3x3 basis);
    void setRotation([Ref, Const] btQuaternion q);
    void setIdentity();

    // [Operator="*=", Ref] btTransform op_mul([Ref, Const] btTransform t);
    [Value] btTransform inverse();
    [Value] btTransform inverseTimes([Ref, Const] btTransform t);

    [Ref, Const] btTransform getIdentity();
};

// http://bulletphysics.org/Bullet/BulletFull/classbtMotionState.html
interface btMotionState {
    void getWorldTransform([Ref] btTransform worldTrans);
    void setWorldTransform([Ref] btTransform worldTrans);
};

// http://bulletphysics.org/Bullet/BulletFull/structbtDefaultMotionState.html
interface btDefaultMotionState {
  void btDefaultMotionState([Ref] btTransform startTrans, [Ref] btTransform centerOfMassOffset);

  [Value] attribute btTransform m_graphicsWorldTrans;
  [Value] attribute btTransform m_centerOfMassOffset;
  [Value] attribute btTransform m_startWorldTrans;
};
btDefaultMotionState implements btMotionState;

// http://bulletphysics.org/Bullet/BulletFull/classbtPoolAllocator.html
interface btPoolAllocator {
    void btPoolAllocator(long elemSize, long maxElements);

    long getFreeCount();
    long getUsedCount();
    long getMaxCount();

    any allocate(long size);

    boolean validPtr(any ptr);

    void freeMemory(any ptr);

    long getElementSize();
};
