// http://bulletphysics.org/Bullet/BulletFull/classbtDispatcher.html
interface btDispatcher {
    // TODO: Some issuse with btCollisionObjectWrapper below. Must fix that first, for this to work.
    // btCollisionAlgorithm findAlgorithm(
    //     [Const] btCollisionObjectWrapper body0Wrap,
    //     [Const] btCollisionObjectWrapper body1Wrap,
    //     btPersistentManifold sharedManifold
    // );
    btPersistentManifold getNewManifold(
        [Const] btCollisionObject b0,
        [Const] btCollisionObject b1
    );
    void releaseManifold(btPersistentManifold manifold);
    void clearManifold(btPersistentManifold manifold);

    boolean needsCollision(
        [Const] btCollisionObject body0,
        [Const] btCollisionObject body1
    );
    boolean needsResponse(
        [Const] btCollisionObject body0,
        [Const] btCollisionObject body1
    );

    void dispatchAllCollisionPairs(
        btOverlappingPairCache pairCache,
        [Ref, Const] btDispatcherInfo dispatchInfo,
        btDispatcher dispatcher
    );

    long getNumManifolds();

    btPersistentManifold getManifoldByIndexInternal(long index);
   //  btPersistentManifold getInternalManifoldPointer();
    btPoolAllocator getInternalManifoldPool();

    any allocateCollisionAlgorithm(long size);
    void freeCollisionAlgorithm(any ptr);
};

// http://bulletphysics.org/Bullet/BulletFull/classbtVoronoiSimplexSolver.html
interface btVoronoiSimplexSolver {
    void removeVertex(long index);
    void reduceVertices([Ref, Const] btUsageBitfield usedVerts);
    boolean updateClosestVectorAndPoints();
    boolean closestPtPointTetrahedron(
        [Ref, Const] btVector3 p,
        [Ref, Const] btVector3 a,
        [Ref, Const] btVector3 b,
        [Ref, Const] btVector3 c,
        [Ref, Const] btVector3 d,
        [Ref, Const] btSubSimplexClosestResult finalResult
    );
    long pointOutsideOfPlane(
        [Ref, Const] btVector3 p,
        [Ref, Const] btVector3 a,
        [Ref, Const] btVector3 b,
        [Ref, Const] btVector3 c,
        [Ref, Const] btVector3 d
    );
    boolean closestPtPointTriangle(
        [Ref, Const] btVector3 p,
        [Ref, Const] btVector3 a,
        [Ref, Const] btVector3 b,
        [Ref, Const] btVector3 c,
        [Ref, Const] btSubSimplexClosestResult result
    );

    void btVoronoiSimplexSolver();

    void reset();

    void addVertex(
        [Ref, Const] btVector3 w,
        [Ref, Const] btVector3 p,
        [Ref, Const] btVector3 q
    );

    void setEqualVertexThreshold(float threshold);
    float getEqualVertexThreshold();

    boolean closest([Ref] btVector3 v);

    float maxVertex();
    boolean fullSimplex();
    long getSimplex(btVector3 pBuf, btVector3 qBuf, btVector3 yBuf);
    boolean inSimplex([Ref, Const] btVector3 w);

    void backup_closest([Ref] btVector3 v);

    boolean emptySimplex();

    void compute_points([Ref] btVector3 p1, [Ref] btVector3 p2);

    long numVertices();
};

// http://bulletphysics.org/Bullet/BulletFull/structbtUsageBitfield.html
interface btUsageBitfield {
    void btUsageBitfield();

    void reset();

    attribute unsigned short usedVertexA;
    attribute unsigned short usedVertexB;
    attribute unsigned short usedVertexC;
    attribute unsigned short usedVertexD;
    attribute unsigned short unused1;
    attribute unsigned short unused2;
    attribute unsigned short unused3;
    attribute unsigned short unused4;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtSubSimplexClosestResult.html
interface btSubSimplexClosestResult  {
    void btSubSimplexClosestResult();

    void reset();
    boolean isValid();
    void setBarycentricCoordinates(
        float a,
        float b,
        float c,
        float d
    );

    [Value] attribute btVector3 m_closestPointOnSimplex;
    [Value] attribute btUsageBitfield m_usedVertices;
    // [Value] attribute float m_barycentricCoords; // array of floats? Possible?
    attribute boolean m_degenerate;
};

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionAlgorithm.html
interface btCollisionAlgorithm {
    // void btCollisionAlgorithm();
    // void btCollisionAlgorithm([Ref, Const] btCollisionAlgorithmConstructionInfo ci);

    // void processCollision(
    //     btCollisionObjectWrapper body0Wrap,
    //     btCollisionObjectWrapper body1Wrap,
    //     [Ref, Const] btDispatcherInfo dispatchInfo,
    //     btManifoldResult resultOut
    // );

    float calculateTimeOfImpact(
        btCollisionObject body0,
        btCollisionObject body1,
        [Ref, Const] btDispatcherInfo dispatchInfo,
        btManifoldResult resultOut
    );

    void getAllContactManifolds([Ref] btManifoldArray manifoldArray);
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionAlgorithmConstructionInfo.html
interface btCollisionAlgorithmConstructionInfo {
    void btCollisionAlgorithmConstructionInfo();
    void btCollisionAlgorithmConstructionInfo(btDispatcher dispatcher, long temp);

    attribute btDispatcher m_dispatcher1;
    attribute btPersistentManifold m_manifold;
};

// http://bulletphysics.org/Bullet/BulletFull/btCollisionAlgorithm_8h.html#aa5a8e58a0ce241d094fa5552fc70f5b8
interface btManifoldArray {};

// http://bulletphysics.org/Bullet/BulletFull/classbtManifoldResult.html
interface btManifoldResult {
    void btManifoldResult();
    // void btManifoldResult(
    //     btCollisionObjectWrapper body0Wrap,
    //     btCollisionObjectWrapper body1Wrap
    // );

    void setPersistentManifold(btPersistentManifold manifoldPtr);
    [Const] btPersistentManifold getPersistentManifold();

    void setShapeIdentifiersA(long partId0, long index0);
    void setShapeIdentifiersB(long partId1, long index1);

    void addContactPoint(
        [Ref, Const] btVector3 normalOnBInWorld,
        [Ref, Const] btVector3 pointInWorld,
        float depth
    );

    void refreshContactPoints();

    // [Const] btCollisionObjectWrapper getBody0Wrap();
    // [Const] btCollisionObjectWrapper getBody1Wrap();
    // void setBody0Wrap([Const] btCollisionObjectWrapper obj0Wrap);
    // void setBody1Wrap([Const] btCollisionObjectWrapper obj1Wrap);

    [Const] btCollisionObject getBody0Internal();
    [Const] btCollisionObject getBody1Internal();

    float calculateCombinedRestitution(
        [Const] btCollisionObject body0,
        [Const] btCollisionObject body1
    );
    float calculateCombinedFriction(
        [Const] btCollisionObject body0,
        [Const] btCollisionObject body1
    );
};

// http://bulletphysics.org/Bullet/BulletFull/classbtBroadphaseInterface.html
interface btBroadphaseInterface {
    btBroadphaseProxy createProxy(
        [Ref, Const] btVector3 aabbMin,
        [Ref, Const] btVector3 aabbMax,
        long shapeType,
        any userPtr,
        long collisionFilterGroup,
        long collisionFilterMask,
        btDispatcher dispatcher
    );
    void destroyProxy(
        btBroadphaseProxy proxy,
        btDispatcher dispatcher
    );

    void setAabb(
        btBroadphaseProxy proxy,
        [Ref, Const] btVector3 aabbMin,
        [Ref, Const] btVector3 aabbMax,
        btDispatcher dispatcher
    );
    void getAabb(
        btBroadphaseProxy proxy,
        [Ref, Const] btVector3 aabbMin,
        [Ref, Const] btVector3 aabbMax
    );
    void rayTest (
        [Ref, Const] btVector3 rayFrom,
        [Ref, Const] btVector3 rayTo,
        [Ref] btBroadphaseRayCallback rayCallback,
        [Ref, Const] btVector3 aabbMin,
        [Ref, Const] btVector3 aabbMax
    );
    void aabbTest (
        [Ref, Const] btVector3 aabbMin,
        [Ref, Const] btVector3 aabbMax,
        [Ref] btBroadphaseAabbCallback callback
    );

    void calculateOverlappingPairs(btDispatcher dispatcher);

    [Const] btOverlappingPairCache getOverlappingPairCache();

    void getBroadphaseAabb([Ref] btVector3 aabbMin, [Ref] btVector3 aabbMax);

    void resetPool(btDispatcher dispatcher);

    void printStats();
};

// http://bulletphysics.org/Bullet/BulletFull/structbtDispatcherInfo.html
interface btDispatcherInfo {
    void btDispatcherInfo();

    attribute float m_timeStep;
    attribute long m_stepCount;
    attribute long m_dispatchFunc;
    attribute float m_timeOfImpact;
    attribute boolean m_useContinuous;
    // [Const] attribute btIDebugDraw m_debugDraw;
    attribute boolean m_enableSatConvex;
    attribute boolean m_enableSPU;
    attribute boolean m_useEpa;
    attribute float m_allowedCcdPenetration;
    attribute boolean m_useConvexConservativeDistanceUtil;
    attribute float m_convexConservativeDistanceThreshold;
};

// http://bulletphysics.org/Bullet/BulletFull/btCollisionObject_8h.html#a6e21ccefdea3a53d5ec8f6aa2849bf8b
interface btCollisionObjectArray {};

// http://bulletphysics.org/Bullet/BulletFull/structbtBroadphaseAabbCallback.html
interface btBroadphaseAabbCallback {
    boolean process([Const] btBroadphaseProxy proxy);
};

// http://bulletphysics.org/Bullet/BulletFull/structbtBroadphaseRayCallback.html
interface btBroadphaseRayCallback {
    [Value] attribute btVector3 m_rayDirectionInverse;
    // attribute long m_signs;
    attribute float m_lambda_max;
};
btBroadphaseRayCallback implements btBroadphaseAabbCallback;

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1RayResultCallback.html
[Prefix="btCollisionWorld::"]
interface RayResultCallback {
    boolean hasHit();

    boolean needsCollision(btBroadphaseProxy proxy0);
    float addSingleResult(
        [Ref] LocalRayResult rayResult,
        boolean normalInWorldSpace
    );

    attribute float m_closestHitFraction;
    [Const] attribute btCollisionObject m_collisionObject;
    attribute long m_collisionFilterGroup;
    attribute long m_collisionFilterMask;
    attribute long m_flags;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1LocalRayResult.html
[Prefix="btCollisionWorld::"]
interface LocalRayResult {
 	void LocalRayResult (
        [Const] btCollisionObject collisionObject,
        LocalShapeInfo localShapeInfo,
        [Ref, Const] btVector3 hitNormalLocal,
        float hitFraction
    );

    [Const] attribute btCollisionObject m_collisionObject;
    [Const] attribute LocalShapeInfo m_localShapeInfo;
    [Value, Const] attribute btVector3 m_hitNormalLocal;
    [Const] attribute float m_hitFraction;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1LocalShapeInfo.html
[Prefix="btCollisionWorld::"]
interface LocalShapeInfo {
    attribute long m_shapePart;
    attribute long m_triangleIndex;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1ConvexResultCallback.html
[Prefix="btCollisionWorld::"]
interface ConvexResultCallback {
    boolean hasHit();

    boolean needsCollision(btBroadphaseProxy proxy0);
    float addSingleResult(
        [Ref] LocalConvexResult convexResult,
        boolean normalInWorldSpace
    );

    attribute float m_closestHitFraction;
    attribute long m_collisionFilterGroup;
    attribute long m_collisionFilterMask;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1LocalConvexResult.html
[Prefix="btCollisionWorld::"]
interface LocalConvexResult  {
 	void LocalConvexResult (
        [Const] btCollisionObject collisionObject,
        LocalShapeInfo localShapeInfo,
        [Ref, Const] btVector3 hitNormalLocal,
        [Ref, Const] btVector3 hitPointLocal,
        float hitFraction
    );

    [Const] attribute btCollisionObject m_hitCollisionObject;
    attribute LocalShapeInfo m_localShapeInfo;
    [Value] attribute btVector3 m_hitNormalLocal;
    [Value] attribute btVector3 m_hitPointLocal;
    attribute float m_hitFraction;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionWorld_1_1ContactResultCallback.html
[Prefix="btCollisionWorld::"]
interface ContactResultCallback {
    // void ContactResultCallback();

    boolean needsCollision(btBroadphaseProxy proxy0);
    // float addSingleResult(
    //     [Ref] btManifoldPoint cp,
    //     [Const] btCollisionObjectWrapper colObj0Wrap,
    //     [Const] btCollisionObjectWrapper colObj1Wrap,
    //     long partId1,
    //     long index1
    // );

    attribute long m_collisionFilterGroup;
    attribute long m_collisionFilterMask;
};

// http://bulletphysics.org/Bullet/BulletFull/structbtDefaultCollisionConstructionInfo.html
interface btDefaultCollisionConstructionInfo {
    void btDefaultCollisionConstructionInfo();

    attribute btPoolAllocator m_persistentManifoldPool;
    attribute btPoolAllocator m_collisionAlgorithmPool;
    attribute long m_defaultMaxPersistentManifoldPoolSize;
    attribute long m_defaultMaxCollisionAlgorithmPoolSize;
    attribute long m_customCollisionAlgorithmMaxElementSize;
    attribute long m_useEpaPenetrationAlgorithm;
};

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionConfiguration.html
interface btCollisionConfiguration {
    btPoolAllocator getPersistentManifoldPool();
    btPoolAllocator getCollisionAlgorithmPool();
    btCollisionAlgorithmCreateFunc getCollisionAlgorithmCreateFunc(long proxyType0, long proxyType1);
};

// http://bulletphysics.org/Bullet/BulletFull/classbtDefaultCollisionConfiguration.html
interface btDefaultCollisionConfiguration  {
    void btDefaultCollisionConfiguration([Ref, Const] btDefaultCollisionConstructionInfo constructionInfo);

    btPoolAllocator getPersistentManifoldPool();
    btPoolAllocator getCollisionAlgorithmPool();
    // btVoronoiSimplexSolver getSimplexSolver();
    btCollisionAlgorithmCreateFunc getCollisionAlgorithmCreateFunc(long proxyType0, long proxyType1);
    void setConvexConvexMultipointIterations(
        long numPerturbationIterations,
        long minimumPointsPerturbationThreshold
    );
    void setPlaneConvexMultipointIterations(
        long numPerturbationIterations,
        long minimumPointsPerturbationThreshold
    );
};
btDefaultCollisionConfiguration implements btCollisionConfiguration;

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionAlgorithmCreateFunc.html
interface btCollisionAlgorithmCreateFunc {};

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionObject.html
interface btCollisionObject {
    boolean mergesSimulationIslands();

    [Ref, Const] btVector3 getAnisotropicFriction();
    void setAnisotropicFriction([Ref, Const] btVector3 anisotropicFriction, long frictionMode);
    boolean hasAnisotropicFriction(long frictionMode);

    void setContactProcessingThreshold(float contactProcessingThreshold);
    float getContactProcessingThreshold();

    boolean isStaticObject();
    boolean isKinematicObject();
    boolean isStaticOrKinematicObject();
    boolean hasContactResponse();

    void btCollisionObject();

    void setCollisionShape(btCollisionShape collisionShape);
    [Const] btCollisionShape getCollisionShape();

    void setIgnoreCollisionCheck ([Const] btCollisionObject co, boolean ignoreCollisionCheck);
    boolean checkCollideWithOverride([Const] btCollisionObject co);

    any internalGetExtensionPointer();
    void internalSetExtensionPointer(any pointer);

    long getActivationState();
    void setActivationState(long newState);
    void setDeactivationTime(float time);
    float getDeactivationTime();

    void forceActivationState(long newState);
    void activate(boolean forceActivation);
    boolean isActive();

    void setRestitution(float rest);
    float getRestitution();

    void setFriction(float frict);
    float getFriction();

    void setRollingFriction(float frict);
    float getRollingFriction();

    long getInternalType();

    [Ref, Const] btTransform getWorldTransform();
    void setWorldTransform([Ref, Const] btTransform worldTrans);

    [Const] btBroadphaseProxy getBroadphaseHandle();
    void setBroadphaseHandle([Const] btBroadphaseProxy handle);

    [Ref, Const] btTransform getInterpolationWorldTransform();
    void setInterpolationWorldTransform([Ref, Const] btTransform trans);

    void setInterpolationLinearVelocity([Ref, Const] btVector3 linvel);
    void setInterpolationAngularVelocity([Ref, Const] btVector3 angvel);
    [Ref, Const] btVector3 getInterpolationLinearVelocity();
    [Ref, Const] btVector3 getInterpolationAngularVelocity();

    long getIslandTag();
    void setIslandTag(long tag);

    long getCompanionId();
    void setCompanionId(long id);

    float getHitFraction();
    void setHitFraction(float hitFraction);

    long getCollisionFlags();
    void setCollisionFlags(long flags);

    float getCcdSweptSphereRadius();
    void setCcdSweptSphereRadius(float radius);

    float getCcdMotionThreshold();
    float getCcdSquareMotionThreshold();
    void setCcdMotionThreshold(float ccdMotionThreshold);

    long getUpdateRevisionInternal();

    boolean checkCollideWith([Const] btCollisionObject co);
};

// http://bulletphysics.org/Bullet/BulletFull/structbtCollisionObjectWrapper.html
// TODO: the "BT_DECLARE_STACK_ONLY_OBJECT" macro making issues
// interface btCollisionObjectWrapper {
    // void btCollisionObjectWrapper(
    //     [Const] btCollisionObjectWrapper  parent,
    //     [Const] btCollisionShape shape,
    //     [Const] btCollisionObject collisionObject,
    //     [Ref, Const] btTransform worldTransform,
    //     long partId,
    //     long index
    // );

    // [Ref, Const] btTransform getWorldTransform();
    // [Const] btCollisionObject getCollisionObject();
    // [Const] btCollisionShape getCollisionShape();

    // [Const] attribute btCollisionObjectWrapper m_parent;
    // [Const] attribute btCollisionShape m_shape;
    // [Const] attribute btCollisionObject m_collisionObject;
    // [Value] attribute btTransform m_worldTransform;
    // attribute long m_partId;
    // attribute long m_index;
// };

// http://bulletphysics.org/Bullet/BulletFull/classbtCollisionWorld.html
interface btCollisionWorld {
    void btCollisionWorld(
        btDispatcher dispatcher,
        btBroadphaseInterface broadphasePairCache,
        btCollisionConfiguration collisionConfiguration
    );

    void setBroadphase(btBroadphaseInterface pairCache);
    [Const] btBroadphaseInterface getBroadphase();
    [Const] btOverlappingPairCache getPairCache();
    [Const] btDispatcher getDispatcher();

    void updateSingleAabb(btCollisionObject colObj);
    void updateAabbs();
    void computeOverlappingPairs();

    // void setDebugDrawer(btIDebugDraw debugDrawer);
    // btIDebugDraw getDebugDrawer();

    void debugDrawWorld();
    void debugDrawObject(
        [Ref, Const] btTransform worldTransform,
        [Const] btCollisionShape shape,
        [Ref, Const] btVector3 color
    );

    long getNumCollisionObjects();
    void rayTest (
        [Ref, Const] btVector3 rayFromWorld,
        [Ref, Const] btVector3 rayToWorld,
        [Ref] RayResultCallback resultCallback
    );
    void convexSweepTest(
        [Const] btConvexShape castShape,
        [Ref, Const] btTransform from,
        [Ref, Const] btTransform to,
        [Ref] ConvexResultCallback resultCallback,
        float allowedCcdPenetration
    );

    void contactTest(
        btCollisionObject colObj,
        [Ref] ContactResultCallback resultCallback
    );
    void contactPairTest(
        btCollisionObject colObjA,
        btCollisionObject colObjB,
        [Ref] ContactResultCallback resultCallback
    );
    void addCollisionObject(
        btCollisionObject collisionObject,
        long collisionFilterGroup,
        long collisionFilterMask
    );

    [Ref, Const] btCollisionObjectArray getCollisionObjectArray();
    void removeCollisionObject(btCollisionObject collisionObject);
    void performDiscreteCollisionDetection();

    [Ref, Const] btDispatcherInfo getDispatchInfo();
    boolean getForceUpdateAllAabbs();
    void setForceUpdateAllAabbs(boolean forceUpdateAllAabbs);
};